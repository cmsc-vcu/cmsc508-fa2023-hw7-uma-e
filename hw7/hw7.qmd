---
title: Homework 7 - Creating a resume database
author: Uma Manicka
date: November 23, 2023
format:
    html:
        theme: minty
        toc: true
        embed-resources: true
        code-copy: true
---

This document is the QMD file.

It contains: 
* Github Link
* Imports/Libraries
* Load/Store Credentials
* Connects to DB
* Overview + Crow's foot diagram
* Listings of People, Roles, and Skills tables
* Sample Queries
* Reflection

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-uma-e>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This database allows a company to capture the skills that they already have amongst their employees in order to efficiently hire the skills they do not already have. 

It does this using people, roles, and skills tables with peopleskills and peopleroles tables to connect the tables.

## Crows-foot diagram


```{mermaid}
erDiagram
    people }o--o{ skills : "have"
    people }|--|{ roles : "are in"

    people {
        int people_id
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }

    skills {
        int skills_id
        string skills_name
        string skills_desc
        string skills_tag
        string skills_url
        int skills_time_commitment
    }

    roles {
        int id
        string name
        int sort_priority
    }


```

## Examples of data in the database


### People table

The *people* table contains elements that describe all the people who work at the company! This is just a general table for the employees info. 

It contains: id, first_name, last_name, email, linkedin_url, headshot_url, discord_handle, brief_bio, date_joined


Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe describe all the different skills held for or being looked for. 

It contains: id, name, description, tag, url, time_commitment

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe all the various roles available in the database for the different employees as well as sorting their priority.

It contains: id, name, sort_priority

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Time to explore!

# List skill names, tags, and descriptions ordered by name

```{python}
sql = f"""
select 
 skills_name,
 skills_tag,
 skills_desc
from 
 skills
ORDER BY
 skills_name
;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
sql = f"""
select 
 first_name,
 email
from 
 people
ORDER BY
 last_name
;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List skill names of Person 1

```{python}
sql = f"""
select
 last_name,
 skills_name,
 skills_tag
from
 peopleskills a
 INNER JOIN people b on (a.people_id = b.people_id)
 INNER JOIN skills c on (a.skills_id = c.skills_id)
WHERE
 last_name = 'Person 1'
; 
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6
```{python}
sql = f"""
select
 first_name
from
 peopleskills a
 INNER JOIN people b on (a.people_id = b.people_id)
 INNER JOIN skills c on (a.skills_id = c.skills_id)
WHERE
 a.skills_id = 6
; 
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role
```{python}
sql = f"""
select
 first_name
from
 peopleroles a
 INNER JOIN people b on (a.people_id = b.people_id)
 INNER JOIN roles c on (a.role_id = c.id)
WHERE
 a.role_id = 2
; 
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills
```{python}
sql = f"""
SELECT
 first_name,
 email
from
 people a
 LEFT JOIN peopleskills b on (a.people_id = b.people_id)
WHERE
 b.people_id is NULL
 ;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills
```{python}
sql = f"""
SELECT
 skills_name,
 skills_tag
from
 skills a
 LEFT JOIN peopleskills b on (a.skills_id = b.skills_id)
WHERE
 b.skills_id is NULL
 ;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role
```{python}
sql = f"""
SELECT
    b.first_name,
    s.skills_name
FROM
    people b
INNER JOIN peopleroles a ON b.people_id = a.people_id
INNER JOIN roles r ON a.role_id = r.id AND r.name = 'Boss'
LEFT JOIN peopleskills ps ON b.people_id = ps.people_id
LEFT JOIN skills s ON ps.skills_id = s.skills_id
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles
```{python}
sql = f"""
SELECT
 a.id,
 name
from
 roles a
 LEFT JOIN peopleroles b on (a.id = b.id)
WHERE
 b.id is NULL
 ;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```



## Reflection

I really enjoyed this assignment. I was a bit in a rush submitting before the submission period closed which made it a little less enjoyable, but this was fun! I enjoyed figuring out how to achieve the results using SQL. I think this will help a lot with the class project as I feel like I learned a lot by actually using the queries we've been going over in lectures. But yeah, overall, an enjoyable and very helpful assignment. There were some confusing and conflicting directions, but I think I did everything right in the end.


